0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/iojs', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@2.10.1
3 info using node@v2.1.0
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec { raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/Users/markwylde/Documents/gulp-istanbul',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package.tgz',
9 verbose tar pack   '/Users/markwylde/Documents/gulp-istanbul' ]
10 verbose tarball /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package.tgz
11 verbose folder /Users/markwylde/Documents/gulp-istanbul
12 info prepublish gulp-istanbul-plus@0.10.2
13 verbose addLocalTarball adding from inside cache /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package.tgz
14 silly cache afterAdd gulp-istanbul-plus@0.10.2
15 verbose afterAdd /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package/package.json not in flight; writing
16 verbose afterAdd /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package/package.json written
17 silly publish { name: 'gulp-istanbul-plus',
17 silly publish   version: '0.10.2',
17 silly publish   description: 'Istanbul unit test coverage plugin for gulp.',
17 silly publish   keywords: [ 'gulpplugin', 'coverage', 'istanbul', 'unit test' ],
17 silly publish   homepage: 'https://github.com/markwylde/gulp-istanbul-plus',
17 silly publish   bugs: { url: 'https://github.com/markwylde/gulp-istanbul-plus/issues' },
17 silly publish   author:
17 silly publish    { name: 'Simon Boudrias',
17 silly publish      email: 'admin@simonboudrias.com',
17 silly publish      url: 'https://github.com/SBoudrias' },
17 silly publish   main: 'index.js',
17 silly publish   files: [ 'index.js' ],
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git://github.com/markwylde/gulp-istanbul-plus.git' },
17 silly publish   scripts: { pretest: 'jshint index.js ./test/.', test: 'mocha -R spec' },
17 silly publish   dependencies:
17 silly publish    { 'gulp-util': '^3.0.1',
17 silly publish      istanbul: '^0.3.2',
17 silly publish      'istanbul-threshold-checker': '^0.1.0',
17 silly publish      lodash: '^3.0.1',
17 silly publish      through2: '^0.6.3' },
17 silly publish   devDependencies:
17 silly publish    { gulp: '^3.6.2',
17 silly publish      'gulp-mocha': '^2.0.0',
17 silly publish      isparta: '^3.0.0',
17 silly publish      jshint: '^2.5.0',
17 silly publish      mocha: '^2.0.1',
17 silly publish      rimraf: '^2.2.8' },
17 silly publish   licenses: [ { type: 'MIT' } ],
17 silly publish   readme: 'gulp-istanbul [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n===========================\n\nDifference in this project\n--------------------------\nThere\'s no way in `gulp-istanbul`, `istanbul` or `isparta` to ignore certain includes, for example if you are\ndoing the following `gulp-istanbul` will fail:\n```javascript\nimport \'./my-style.scss\';\n// or\nimport \'./my-style.css\';\n```\n\nThe above is often seen for people using `webpack` to transpile their code.\n\nThis branch of [SBoudria](https://github.com/SBoudrias/gulp-istanbul)\'s awesome work is the same only it adds\nan additional option called `skipImports` as seen below:\n\n```javascript\nistanbul({\n  // skip both scss and css files\n  skipImports: /\\.(scss|css)$/\n})\n```\n\nA pull request was requested to the main package, but after a discussion\nit was agreed that this is a bit of a work around, and not really under the scope of gulp-stanbul.\n\nHowever the need still remains so it was branched into this repository where this fix (and potentially others in the\nfuture) can live.\n\nIn the future I\'m sure a more long term solution will become available for projects that use css includes.\n\nFor more information on this feature please see the pull request discussion at:\nhttps://github.com/SBoudrias/gulp-istanbul/pull/68\n\n--------------------------------------------------\n\n\n[Istanbul][istanbul] unit test coverage plugin for [gulp][gulp].\n\nWorks on top of any Node.js unit test framework.\n\nInstallation\n---------------\n\n```shell\nnpm install --save-dev gulp-istanbul\n```\n\nExample\n---------------\n\nIn your `gulpfile.js`:\n\n#### Node.js testing\n\n```javascript\nvar istanbul = require(\'gulp-istanbul\');\n// We\'ll use mocha here, but any test framework will work\nvar mocha = require(\'gulp-mocha\');\n\ngulp.task(\'test\', function (cb) {\n  gulp.src([\'lib/**/*.js\', \'main.js\'])\n    .pipe(istanbul()) // Covering files\n    .pipe(istanbul.hookRequire()) // Force `require` to return covered files\n    .on(\'finish\', function () {\n      gulp.src([\'test/*.js\'])\n        .pipe(mocha())\n        .pipe(istanbul.writeReports()) // Creating the reports after tests ran\n        .pipe(istanbul.enforceThresholds({ thresholds: { global: 90 } })) // Enforce a coverage of at least 90%\n        .on(\'end\', cb);\n    });\n});\n```\n\n#### Browser testing\n\nFor browser testing, you\'ll need to write the files covered by istanbul in a directory from where you\'ll serve these files to the browser running the test. You\'ll also need a way to extract the value of the [coverage variable](#coveragevariable) after the test have runned in the browser.\n\nBrowser testing is hard. If you\'re not sure what to do, then I suggest you take a look at [Karma test runner](http://karma-runner.github.io) - it has built-in coverage using Istanbul.\n\n\n```javascript\nvar istanbul = require(\'gulp-istanbul\');\n\ngulp.task(\'test\', function (cb) {\n  gulp.src([\'lib/**/*.js\', \'main.js\'])\n  .pipe(istanbul()) // Covering files\n  .pipe(gulp.dest(\'test-tmp/\'))\n  .on(\'finish\', function () {\n    gulp.src([\'test/*.html\'])\n    .pipe(testFramework())\n    .pipe(istanbul.writeReports()) // Creating the reports after tests ran\n    .on(\'end\', cb);\n  });\n});\n```\n\nAPI\n--------------\n\n### istanbul(opt)\n\nInstrument files passed in the stream.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: \'someVariable\',\n  ...other Instrumeter options...\n}\n```\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `\'$$cov_\' + new Date().getTime() + \'$$\'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n##### includeUntested\nType: `Boolean` (optional)\nDefault: `false`\n\nFlag to include test coverage of files that aren\'t `require`d by any tests\n\nSee also:\n- [istanbul "0% coverage" issue](https://github.com/gotwarlost/istanbul/issues/112)\n\n##### instrumenter\nType: `Instrumenter` (optional)\nDefault: `istanbul.Instrumenter`\n\nCustom Instrumenter to be used instead of the default istanbul one.\n\n```js\nvar isparta = require(\'isparta\');\nvar istanbul = require(\'gulp-istanbul\');\n\ngulp.src(\'lib/**.js\')\n  .pipe(istanbul({\n    instrumenter: isparta.Instrumenter\n  }));\n```\n\nSee also:\n- [isparta](https://github.com/douglasduteil/isparta)\n\n##### Other Istanbul Instrumenter options\n\nSee:\n- [istanbul Instrumenter documentation][istanbul-coverage-variable]\n\n### istanbul.hookRequire()\n\nOverwrite `require` so it returns the covered files. The method take an optional [option object](https://gotwarlost.github.io/istanbul/public/apidocs/classes/Hook.html#method_hookRequire).\n\nAlways use this option if you\'re running tests in Node.js\n\n### istanbul.summarizeCoverage(opt)\n\nget coverage summary details\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: \'someVariable\'\n}\n```\n##### coverageVariable\nType: `String` (optional)\nDefault: `\'$$cov_\' + new Date().getTime() + \'$$\'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n#### returns\nType: `Object`\n```js\n{\n  lines: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  statements: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  functions: { total: 2, covered: 0, skipped: 0, pct: 0 },\n  branches: { total: 0, covered: 0, skipped: 0, pct: 100 }\n}\n```\n\nSee also:\n- [istanbul utils.summarizeCoverage()][istanbul-summarize-coverage]\n\n\n### istanbul.writeReports(opt)\n\nCreate the reports on stream end.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  dir: \'./coverage\',\n  reporters: [ \'lcov\', \'json\', \'text\', \'text-summary\', CustomReport ],\n  reportOpts: { dir: \'./coverage\' },\n  coverageVariable: \'someVariable\'\n}\n```\n\nYou can pass individual configuration to a reporter.\n```js\n{\n  dir: \'./coverage\',\n  reporters: [ \'lcovonly\', \'json\', \'text\', \'text-summary\', CustomReport ],\n  reportOpts: {\n    lcov: {dir: \'lcovonly\', file: \'lcov.info\'}\n    json: {dir: \'json\', file: \'converage.json\'}\n  },\n  coverageVariable: \'someVariable\'\n}\n```\n##### dir\nType: `String` (optional)\nDefault: `./coverage`\n\nThe folder in which the reports are to be outputted.\n\n##### reporters\nType: `Array` (optional)\nDefault: `[ \'lcov\', \'json\', \'text\', \'text-summary\' ]`\n\nThe list of available reporters:\n- `clover`\n- `cobertura`\n- `html`\n- `json`\n- `lcov`\n- `lcovonly`\n- `none`\n- `teamcity`\n- `text`\n- `text-summary`\n\nYou can also specify one or more custom reporter objects as items in the array. These will be automatically registered with istanbul.\n\nSee also `require(\'istanbul\').Report.getReportList()`\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `\'$$cov_\' + new Date().getTime() + \'$$\'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n\n### istanbul.enforceThresholds(opt)\n\nChecks coverage against minimum acceptable thresholds. Fails the build if any of the thresholds are not met.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: \'someVariable\',\n  thresholds: {\n    global: 60,\n    each: -10\n  }\n}\n```\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `\'$$cov_\' + new Date().getTime() + \'$$\'`\n\nThe global variable istanbul uses to store coverage\n\n\n##### thresholds\nType: `Object` (required)\n\nMinimum acceptable coverage thresholds. Any coverage values lower than the specified threshold will fail the build.\n\nEach threshold value can be:\n- A positive number - used as a percentage\n- A negative number - used as the maximum amount of coverage gaps\n- A falsey value will skip the coverage\n\nThresholds can be specified across all files (`global`) or per file (`each`):\n```\n{\n  global: 80,\n  each: 60\n}\n```\n\nYou can also specify a value for each metric:\n```\n{\n  global: {\n    statements: 80,\n    branches: 90,\n    lines: 70,\n    functions: -10\n  }\n  each: {\n    statements: 100,\n    branches: 70,\n    lines: -20\n  }\n}\n```\n\n#### emits\n\nA plugin error in the stream if the coverage fails\n\nLicense\n------------\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License) (c) Simon Boudrias - 2013\n\n[istanbul]: http://gotwarlost.github.io/istanbul/\n[gulp]: https://github.com/gulpjs/gulp\n\n[npm-url]: https://npmjs.org/package/gulp-istanbul\n[npm-image]: https://badge.fury.io/js/gulp-istanbul.svg\n\n[travis-url]: http://travis-ci.org/SBoudrias/gulp-istanbul\n[travis-image]: https://secure.travis-ci.org/SBoudrias/gulp-istanbul.svg?branch=master\n\n[depstat-url]: https://david-dm.org/SBoudrias/gulp-istanbul\n[depstat-image]: https://david-dm.org/SBoudrias/gulp-istanbul.svg\n\n[istanbul-coverage-variable]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/Instrumenter.html\n[istanbul-summarize-coverage]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/ObjectUtils.html#method_summarizeCoverage\n[sandboxed-module-coverage-variable]: https://github.com/felixge/node-sandboxed-module/blob/master/lib/sandboxed_module.js#L240\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '5c4a1fe06e146d9ee7b056bbfabc6928e2c60b15',
17 silly publish   _id: 'gulp-istanbul-plus@0.10.2',
17 silly publish   _shasum: '6bae724943a3dc34e4daab0d9671aa614db96cbb',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name gulp-istanbul-plus
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/gulp-istanbul-plus
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/markwylde/.npm/gulp-istanbul-plus/0.10.2/package.tgz
25 verbose request uri https://registry.npmjs.org/gulp-istanbul-plus
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 21:11:05
28 verbose request using bearer token for auth
29 verbose request id 9905cac08faee95a
30 http request PUT https://registry.npmjs.org/gulp-istanbul-plus
31 http 403 https://registry.npmjs.org/gulp-istanbul-plus
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Mon, 14 Sep 2015 20:11:06 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-lcy1123-LCY',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1442261465.847484,VS0,VE1056' }
33 verbose request invalidating /Users/markwylde/.npm/registry.npmjs.org/gulp-istanbul-plus on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.10.2." : gulp-istanbul-plus
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:368:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1219:14)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1167:12)
35 verbose stack     at emitNone (events.js:72:20)
36 verbose statusCode 403
37 verbose pkgid gulp-istanbul-plus
38 verbose cwd /Users/markwylde/Documents/gulp-istanbul
39 error Darwin 14.5.0
40 error argv "/usr/local/bin/iojs" "/usr/local/bin/npm" "publish" "./"
41 error node v2.1.0
42 error npm  v2.10.1
43 error code E403
44 error "You cannot publish over the previously published version 0.10.2." : gulp-istanbul-plus
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
